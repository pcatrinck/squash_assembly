     1                                  ; autor: Patrick Dias Catrinck 
     2                                  ; Trabalho de programação da disciplina de Sistemas Embarcados
     3                                  
     4                                  segment code
     5                                  ..start:
     6 00000000 B8[0000]                        mov         ax,data
     7 00000003 8ED8                            mov         ds,ax
     8 00000005 B8[0000]                        mov         ax,stack
     9 00000008 8ED0                            mov         ss,ax
    10 0000000A BC[0002]                        mov         sp,stacktop
    11                                  
    12                                  ; salvar modo corrente de video(vendo como esta o modo de video da maquina)
    13 0000000D B40F                            mov     ah,0Fh
    14 0000000F CD10                            int     10h
    15 00000011 A2[0100]                        mov     [modo_anterior],al   
    16                                  
    17                                  ; alterar modo de video para grafico 640x480 16 cores
    18 00000014 B012                            mov     al,12h
    19 00000016 B400                            mov     ah,0
    20 00000018 CD10                            int     10h
    21                                  
    22                                  ;desenhar retas
    23                                  
    24 0000001A C606[0000]0F                    mov     byte[cor],branco_intenso    ;baixo
    25 0000001F B80000                          mov     ax,0
    26 00000022 50                              push    ax
    27 00000023 B80000                          mov     ax,0
    28 00000026 50                              push    ax
    29 00000027 B87F02                          mov     ax,639
    30 0000002A 50                              push    ax
    31 0000002B B80000                          mov     ax,0
    32 0000002E 50                              push    ax
    33 0000002F E81F04                          call    line
    34                                  
    35                                  
    36 00000032 C606[0000]0F                    mov     byte[cor],branco_intenso    ;esquerda
    37 00000037 B80000                          mov     ax,0
    38 0000003A 50                              push    ax
    39 0000003B B80000                          mov     ax,0
    40 0000003E 50                              push    ax
    41 0000003F B80000                          mov     ax,0
    42 00000042 50                              push    ax
    43 00000043 B8DF01                          mov     ax,479
    44 00000046 50                              push    ax
    45 00000047 E80704                          call    line
    46                                  
    47 0000004A C606[0000]0F                    mov     byte[cor],branco_intenso    ;cima
    48 0000004F B80000                          mov     ax,0
    49 00000052 50                              push    ax
    50 00000053 B8DF01                          mov     ax,479
    51 00000056 50                              push    ax
    52 00000057 B87F02                          mov     ax,639
    53 0000005A 50                              push    ax
    54 0000005B B8DF01                          mov     ax,479
    55 0000005E 50                              push    ax
    56 0000005F E8EF03                          call    line
    57                                  
    58 00000062 C606[0000]0F                    mov     byte[cor],branco_intenso    ;direita
    59 00000067 B87F02                          mov     ax,639
    60 0000006A 50                              push    ax
    61 0000006B B80000                          mov     ax,0
    62 0000006E 50                              push    ax
    63 0000006F B87F02                          mov     ax,639
    64 00000072 50                              push    ax
    65 00000073 B8DF01                          mov     ax,479
    66 00000076 50                              push    ax
    67 00000077 E8D703                          call    line
    68                                  
    69 0000007A C606[0000]0F                    mov     byte[cor],branco_intenso    ;titulo
    70 0000007F B80000                          mov     ax,0
    71 00000082 50                              push    ax
    72 00000083 B8B801                          mov     ax,440
    73 00000086 50                              push    ax
    74 00000087 B87F02                          mov     ax,639
    75 0000008A 50                              push    ax
    76 0000008B B8B801                          mov     ax,440
    77 0000008E 50                              push    ax
    78 0000008F E8BF03                          call    line
    79                                          
    80                                  ;desenha circulos 
    81 00000092 C606[0000]04                    mov     byte[cor],vermelho
    82 00000097 A1[9800]                        mov     ax,word[p_bx]
    83 0000009A 50                              push    ax
    84 0000009B A1[9A00]                        mov     ax,word[p_by]
    85 0000009E 50                              push    ax
    86 0000009F B80A00                          mov     ax,10
    87 000000A2 50                              push    ax
    88 000000A3 E8EE02                          call    full_circle
    89                                  
    90                                  ;desenha o paddle
    91 000000A6 C606[0000]07                    mov     byte[cor],branco
    92 000000AB A1[9C00]                        mov     ax,[p_px]
    93 000000AE 50                              push    ax
    94 000000AF A1[9E00]                        mov     ax,[p_py]
    95 000000B2 50                              push    ax
    96 000000B3 A1[A000]                        mov     ax,[p_pxl]
    97 000000B6 50                              push    ax
    98 000000B7 A1[A200]                        mov     ax,[p_pya]
    99 000000BA 50                              push    ax
   100 000000BB E89804                          call    desenha_retangulo
   101                                  
   102                                  ;escrever o cabecalho
   103 000000BE B93800                          mov     cx,56			;numero de caracteres
   104 000000C1 BB0000                          mov     bx,0
   105 000000C4 B600                            mov     dh,0			;linha 0-29
   106 000000C6 B200                            mov     dl,0 			;coluna 0-79
   107 000000C8 C606[0000]07                    mov	byte[cor],branco
   108                                  
   109                                  escreve1:
   110 000000CD E86802                          call    cursor
   111 000000D0 8A87[0A00]                      mov     al,[bx+mens1]
   112 000000D4 E87802                          call    caracter
   113 000000D7 43                              inc     bx	                ;proximo caracter
   114 000000D8 FEC2                            inc     dl	                ;avanca a coluna
   115 000000DA E2F1                            loop    escreve1
   116                                  
   117 000000DC B94E00                          mov     cx,78			;numero de caracteres
   118 000000DF BB0000                          mov     bx,0
   119 000000E2 B601                            mov     dh,1			;linha 0-29
   120 000000E4 B200                            mov     dl,0 			;coluna 0-79
   121 000000E6 C606[0000]07                    mov	byte[cor],branco
   122                                  
   123                                  escreve2:
   124 000000EB E84A02                          call    cursor
   125 000000EE 8A87[4200]                      mov     al,[bx+mens2]
   126 000000F2 E85A02                          call    caracter
   127 000000F5 43                              inc     bx	                ;proximo caracter
   128 000000F6 FEC2                            inc     dl	                ;avanca a coluna
   129 000000F8 E2F1                            loop    escreve2
   130                                  
   131                                  nova_bola:
   132 000000FA C606[0000]00                    mov     byte[cor],preto ; apaga a bola anterior
   133 000000FF A1[9800]                        mov     ax,[p_bx]
   134 00000102 50                              push    ax
   135 00000103 A1[9A00]                        mov     ax,[p_by]
   136 00000106 50                              push    ax
   137 00000107 B80A00                          mov     ax,10
   138 0000010A 50                              push    ax
   139 0000010B E88602                          call    full_circle
   140 0000010E 8B1E[9200]                      mov     bx, [vx]
   141 00000112 011E[9800]                      add     [p_bx], bx
   142 00000116 8B1E[9400]                      mov     bx, [vy]
   143 0000011A 011E[9A00]                      add     [p_by], bx
   144                                  
   145 0000011E C606[0000]04                    mov     byte[cor],vermelho
   146 00000123 A1[9800]                        mov     ax,[p_bx]
   147 00000126 50                              push    ax
   148 00000127 A1[9A00]                        mov     ax,[p_by]
   149 0000012A 50                              push    ax
   150 0000012B B80A00                          mov     ax,10
   151 0000012E 50                              push    ax
   152 0000012F E86202                          call    full_circle
   153                                  
   154                                  novo_retangulo:
   155 00000132 C606[0000]00                    mov     byte[cor],preto
   156 00000137 A1[9C00]                        mov     ax,[p_px]
   157 0000013A 50                              push    ax
   158 0000013B A1[9E00]                        mov     ax,[p_py]
   159 0000013E 50                              push    ax
   160 0000013F A1[A000]                        mov     ax,[p_pxl]
   161 00000142 50                              push    ax
   162 00000143 A1[A200]                        mov     ax,[p_pya]
   163 00000146 50                              push    ax
   164 00000147 E80C04                          call    desenha_retangulo
   165                                  
   166 0000014A 8B1E[9600]                      mov bx, [vy_ret]
   167 0000014E 011E[9E00]                      add [p_py], bx
   168 00000152 011E[A200]                      add [p_pya], bx
   169                                  
   170 00000156 C606[0000]07                    mov     byte[cor],branco
   171 0000015B A1[9C00]                        mov     ax,[p_px]
   172 0000015E 50                              push    ax
   173 0000015F A1[9E00]                        mov     ax,[p_py]
   174 00000162 50                              push    ax
   175 00000163 A1[A000]                        mov     ax,[p_pxl]
   176 00000166 50                              push    ax
   177 00000167 A1[A200]                        mov     ax,[p_pya]
   178 0000016A 50                              push    ax
   179 0000016B E8E803                          call    desenha_retangulo
   180                                  
   181                                  del1:
   182 0000016E 8B36[9C00]                      mov si, [p_px]
   183 00000172 81C6F6FF                        add si, -10 ; raio
   184 00000176 3936[9800]                      cmp [p_bx], si
   185 0000017A 7459                            je call_checa_topo
   186                                  
   187 0000017C BE7402                          mov si, 628
   188 0000017F 3936[9800]                      cmp [p_bx], si
   189 00000183 745F                            jz reflete_direita
   190                                  
   191 00000185 BE0A00                          mov si, 10
   192 00000188 3936[9800]                      cmp [p_bx], si
   193 0000018C 7469                            jz reflete_esquerda
   194                                  
   195 0000018E BEAD01                          mov si, 429
   196 00000191 3936[9A00]                      cmp [p_by], si
   197 00000195 7441                            jz call_reflete_cima
   198                                  
   199 00000197 BE0B00                          mov si, 11
   200 0000019A 3936[9A00]                      cmp [p_by], si
   201 0000019E 743B                            jz call_reflete_baixo
   202                                          
   203 000001A0 BE0200                          mov si, 2
   204 000001A3 3936[A200]                      cmp [p_pya], si
   205 000001A7 7E62                            jle subindo
   206                                  
   207 000001A9 BEB701                          mov si, 439
   208 000001AC 3936[9E00]                      cmp [p_py], si
   209 000001B0 7D4F                            jge descendo
   210                                  
   211 000001B2 B40B                            mov ah, 0bh    ;BIOS.TestKey
   212 000001B4 CD21                            int 21h
   213 000001B6 3C00                            cmp al, 0
   214 000001B8 7527                            jne call_jne_keyboard
   215 000001BA E90000                          jmp continua
   216                                  continua:
   217 000001BD E80A00                          call espera
   218 000001C0 E837FF                          call nova_bola
   219 000001C3 E86CFF                          call novo_retangulo
   220 000001C6 59                              pop cx
   221 000001C7 E2A5                            loop del1
   222 000001C9 C3                              ret
   223                                  
   224                                  espera:
   225 000001CA 31C0                            xor ax,ax
   226 000001CC B486                            mov ah, 86h
   227 000001CE 8B16[9000]                      mov dx, [delay] ; ficou melhor botar em dx, cx travava MUITO
   228 000001D2 CD15                            int 15h
   229 000001D4 C3                              ret
   230                                  
   231                                  call_checa_topo:
   232 000001D5 E95100                          jmp checa_topo
   233                                  call_reflete_cima:
   234 000001D8 E93A00                          jmp reflete_cima
   235                                  call_reflete_baixo:
   236 000001DB E94100                          jmp reflete_baixo
   237                                  call_marca_ponto_jogador:
   238 000001DE E90F01                          jmp marca_ponto_jogador
   239                                  call_jne_keyboard:
   240 000001E1 E97300                          jmp keyboard
   241                                  
   242                                  reflete_direita:
   243 000001E4 BEFFFF                          mov si, -1
   244 000001E7 8936[9200]                      mov [vx], si
   245 000001EB BE7402                          mov si, 628
   246 000001EE 3936[9800]                      cmp [p_bx], si
   247 000001F2 747E                            jz  call_marca_ponto_computador
   248 000001F4 E9C6FF                          jmp continua
   249                                  reflete_esquerda:
   250 000001F7 BE0100                          mov si, 1
   251 000001FA 8936[9200]                      mov [vx], si
   252                                          ; mov si, 10
   253                                          ; cmp [p_bx], si
   254                                          ; jz  call_marca_ponto_jogador
   255 000001FE E9BCFF                          jmp continua
   256                                  descendo:
   257 00000201 BEFFFF                          mov si,-1
   258 00000204 8936[9600]                      mov [vy_ret], si
   259 00000208 E9B2FF                          jmp continua
   260                                  subindo:
   261 0000020B BE0100                          mov si,1
   262 0000020E 8936[9600]                      mov [vy_ret], si
   263 00000212 E9A8FF                          jmp continua
   264                                  reflete_cima:
   265 00000215 BEFFFF                          mov si, -1
   266 00000218 8936[9400]                      mov [vy], si
   267 0000021C E93500                          jmp call_continua
   268                                  reflete_baixo:
   269 0000021F BE0100                          mov si, 1
   270 00000222 8936[9400]                      mov [vy], si
   271 00000226 E92B00                          jmp call_continua
   272                                  checa_topo:
   273 00000229 8B36[9E00]                      mov si, [p_py]
   274 0000022D 81C60300                        add si, 3  ; margem
   275 00000231 3936[9A00]                      cmp [p_by], si
   276 00000235 7E03                            jle checa_base
   277 00000237 E91A00                          jmp call_continua
   278                                  checa_base:
   279 0000023A 8B36[A200]                      mov si, [p_pya]
   280 0000023E 81C6FDFF                        add si, -3 ; margem
   281 00000242 3936[9A00]                      cmp [p_by], si
   282 00000246 7C0C                            jnge call_continua
   283 00000248 BEFFFF                          mov si, -1
   284 0000024B 3936[9200]                      cmp [vx],si
   285 0000024F 7403                            je call_continua
   286 00000251 E88AFF                          call call_marca_ponto_jogador
   287                                  call_continua:
   288 00000254 E966FF                          jmp continua
   289                                  keyboard:
   290 00000257 B408                            mov ah, 08H ;Ler caracter da STDIN
   291 00000259 CD21                            int 21H
   292 0000025B 3C63                            cmp al, 'c'
   293 0000025D 74AC                            jz subindo
   294 0000025F 3C62                            cmp al, 'b'
   295 00000261 749E                            jz descendo
   296 00000263 3C70                            cmp al, 'p'
   297 00000265 7421                            jz acelera
   298 00000267 3C6D                            cmp al, 'm'
   299 00000269 740A                            jz desacelera
   300 0000026B 3C73                            cmp al, 's'
   301 0000026D 742C                            jz encerra
   302 0000026F E94BFF                          jmp continua
   303                                  
   304                                  call_marca_ponto_computador:
   305 00000272 E95700                      jmp marca_ponto_computador
   306                                  
   307                                  desacelera:
   308 00000275 BE204E                          mov si,20000
   309 00000278 3936[9000]                      cmp [delay], si
   310 0000027C 7429                            je marca_velocidade
   311 0000027E BE1027                          mov si, 10000
   312 00000281 0136[9000]                      add[delay], si
   313 00000285 E91F00                          jmp marca_velocidade
   314                                  acelera:
   315 00000288 BE0000                          mov si,0
   316 0000028B 3936[9000]                      cmp [delay], si
   317 0000028F 7416                            je marca_velocidade
   318 00000291 BEF0D8                          mov si, -10000
   319 00000294 0136[9000]                      add[delay], si
   320 00000298 E90C00                          jmp marca_velocidade
   321                                  
   322                                  encerra:
   323 0000029B B400                            mov ah,0 ; set video mode
   324 0000029D A0[0100]                        mov al,[modo_anterior] ; recupera o modo anterior
   325 000002A0 CD10                            int 10h
   326 000002A2 B8004C                          mov ax,4c00h
   327 000002A5 CD21                            int 21h
   328                                  
   329                                  ; velocidade_1:
   330                                  ;         mov ax,1
   331                                  ;         ret
   332                                  ; velocidade_2:
   333                                  ;         mov ax,2
   334                                  ;         ret
   335                                  ; velocidade_3:
   336                                  ;         mov ax,3
   337                                  ;         ret
   338                                  
   339                                  marca_velocidade:
   340 000002A7 A1[9000]                        mov     ax, [delay]   ; Load 'delay' into AX
   341 000002AA B91027                          mov     cx, 10000     ; Set the divisor to 10,000
   342 000002AD 31D2                            xor     dx, dx        ; Clear DX to ensure the division result doesn't affect it
   343 000002AF F7F1                            div     cx            ; Divide AX by CX, result in AX (quotient), DX (remainder)
   344 000002B1 050100                          add     ax,1
   345                                          ; mov ax, [delay]
   346                                          ; cmp ax,0
   347                                          ; je velocidade_3
   348                                          ; cmp ax,10000
   349                                          ; je velocidade_2
   350                                          ; cmp ax,20000
   351                                          ; je velocidade_1
   352 000002B4 E86B00                          call    converte_para_ascii     
   353 000002B7 BB[A800]                        mov     bx, string_ponto_computador       
   354 000002BA B90200                          mov     cx, 2                   
   355 000002BD B601                            mov     dh, 1                 
   356 000002BF B248                            mov     dl, 72
   357 000002C1 C606[0000]0F                    mov     byte [cor], branco_intenso    
   358 000002C6 E84B00                          call    escreve_valor_loop
   359 000002C9 E9F1FE                          jmp     continua
   360                                  
   361                                  marca_ponto_computador:
   362 000002CC A1[A600]                        mov     ax, [ponto_computador]
   363 000002CF 050100                          add     ax, 1
   364 000002D2 A3[A600]                        mov     [ponto_computador], ax
   365 000002D5 A1[A600]                        mov     ax, [ponto_computador]  
   366 000002D8 E84700                          call    converte_para_ascii     
   367 000002DB BB[A800]                        mov     bx, string_ponto_computador       
   368 000002DE B90200                          mov     cx, 2                   
   369 000002E1 B601                            mov     dh, 1                 
   370 000002E3 B219                            mov     dl, 25                  
   371 000002E5 C606[0000]04                    mov     byte [cor], vermelho    
   372 000002EA E82700                          call    escreve_valor_loop
   373 000002ED E9CDFE                          jmp     continua
   374                                  
   375                                  marca_ponto_jogador:
   376 000002F0 A1[A400]                        mov     ax, [ponto_jogador]
   377 000002F3 050100                          add     ax, 1
   378 000002F6 A3[A400]                        mov     [ponto_jogador], ax
   379 000002F9 A1[A400]                        mov     ax, [ponto_jogador]  
   380 000002FC E82300                          call    converte_para_ascii  
   381 000002FF BB[A800]                        mov     bx, string_ponto_computador       
   382 00000302 B90200                          mov     cx, 2       
   383 00000305 B601                            mov     dh, 1        
   384 00000307 B212                            mov     dl, 18          
   385 00000309 C606[0000]01                    mov     byte [cor], azul  
   386 0000030E E80300                          call    escreve_valor_loop
   387 00000311 E8D0FE                          call    reflete_direita
   388                                  
   389                                  escreve_valor_loop:
   390 00000314 E82100                          call    cursor
   391 00000317 8A07                            mov     al, [bx]             
   392 00000319 E83300                          call    caracter
   393 0000031C 43                              inc     bx                    
   394 0000031D FEC2                            inc     dl  
   395 0000031F E2F3                            loop    escreve_valor_loop
   396 00000321 C3                              ret
   397                                  
   398                                  converte_para_ascii:
   399 00000322 50                              push    ax                               ; empilha ax
   400 00000323 31D2                            xor     dx, dx                           ; limpa dx antes de dividir
   401 00000325 B90A00                          mov     cx, 10                           ; numerador recebe 10
   402 00000328 F7F1                            div     cx                               ; divide ax por 10
   403 0000032A 80C230                          add     dl, '0'                          ; soma o valor do caracter 0 em ascii, para converter as dezenas
   404 0000032D 8816[A900]                      mov     [string_ponto_computador+1], dl  ; guarda as unidades na casa do lado
   405 00000331 0430                            add     al, '0'                          ; converte pra ascii
   406 00000333 A2[A800]                        mov     [string_ponto_computador], al    ; termina de armazenar o resultado
   407 00000336 58                              pop     ax                               ; restaura o valor de ax
   408 00000337 C3                              ret
   409                                  
   410                                  ;   funcao cursor
   411                                  ;
   412                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   413                                  cursor:
   414 00000338 9C                              pushf
   415 00000339 50                              push    ax
   416 0000033A 53                              push    bx
   417 0000033B 51                              push    cx
   418 0000033C 52                              push    dx
   419 0000033D 56                              push    si
   420 0000033E 57                              push    di
   421 0000033F 55                              push    bp
   422 00000340 B402                            mov     ah,2
   423 00000342 B700                            mov     bh,0
   424 00000344 CD10                            int     10h
   425 00000346 5D                              pop     bp
   426 00000347 5F                              pop     di
   427 00000348 5E                              pop     si
   428 00000349 5A                              pop     dx
   429 0000034A 59                              pop     cx
   430 0000034B 5B                              pop     bx
   431 0000034C 58                              pop     ax
   432 0000034D 9D                              popf
   433 0000034E C3                              ret
   434                                  ;_____________________________________________________________________________
   435                                  ;
   436                                  ;   funcao caracter escrito na posicao do cursor
   437                                  ;
   438                                  ; al= caracter a ser escrito
   439                                  ; cor definida na variavel cor
   440                                  caracter:
   441 0000034F 9C                              pushf
   442 00000350 50                              push        ax
   443 00000351 53                              push        bx
   444 00000352 51                              push        cx
   445 00000353 52                              push        dx
   446 00000354 56                              push        si
   447 00000355 57                              push        di
   448 00000356 55                              push        bp
   449 00000357 B409                            mov         ah,9
   450 00000359 B700                            mov         bh,0
   451 0000035B B90100                          mov         cx,1
   452 0000035E 8A1E[0000]                      mov         bl,[cor]
   453 00000362 CD10                            int         10h
   454 00000364 5D                              pop     bp
   455 00000365 5F                              pop     di
   456 00000366 5E                              pop     si
   457 00000367 5A                              pop     dx
   458 00000368 59                              pop     cx
   459 00000369 5B                              pop     bx
   460 0000036A 58                              pop     ax
   461 0000036B 9D                              popf
   462 0000036C C3                              ret
   463                                  ;_____________________________________________________________________________
   464                                  ;
   465                                  ;   funcao plot_xy
   466                                  ;
   467                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   468                                  ; cor definida na variavel cor
   469                                  plot_xy:
   470 0000036D 55                              push        bp
   471 0000036E 89E5                            mov     bp,sp
   472 00000370 9C                              pushf
   473 00000371 50                              push        ax
   474 00000372 53                              push        bx
   475 00000373 51                              push        cx
   476 00000374 52                              push        dx
   477 00000375 56                              push        si
   478 00000376 57                              push        di
   479 00000377 B40C                            mov         ah,0ch
   480 00000379 A0[0000]                        mov         al,[cor]
   481 0000037C B700                            mov         bh,0
   482 0000037E BADF01                          mov         dx,479
   483 00000381 2B5604                          sub     dx,[bp+4]
   484 00000384 8B4E06                          mov         cx,[bp+6]
   485 00000387 CD10                            int         10h
   486 00000389 5F                              pop     di
   487 0000038A 5E                              pop     si
   488 0000038B 5A                              pop     dx
   489 0000038C 59                              pop     cx
   490 0000038D 5B                              pop     bx
   491 0000038E 58                              pop     ax
   492 0000038F 9D                              popf
   493 00000390 5D                              pop     bp
   494 00000391 C20400                          ret     4
   495                                  
   496                                  ;-----------------------------------------------------------------------------
   497                                  ;    funcao full_circle
   498                                  ;    push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   499                                  ; cor definida na variavel cor                    
   500                                  full_circle:
   501 00000394 55                          push    bp
   502 00000395 89E5                        mov     bp,sp
   503 00000397 9C                          pushf                        ;coloca os flags na pilha
   504 00000398 50                          push    ax
   505 00000399 53                          push    bx
   506 0000039A 51                          push    cx
   507 0000039B 52                          push    dx
   508 0000039C 56                          push    si
   509 0000039D 57                          push    di
   510                                  
   511 0000039E 8B4608                      mov     ax,[bp+8]    ; resgata xc
   512 000003A1 8B5E06                      mov     bx,[bp+6]    ; resgata yc
   513 000003A4 8B4E04                      mov     cx,[bp+4]    ; resgata r
   514                                      
   515 000003A7 89DE                        mov     si,bx
   516 000003A9 29CE                        sub     si,cx
   517 000003AB 50                          push    ax          ;coloca xc na pilha         
   518 000003AC 56                          push    si          ;coloca yc-r na pilha
   519 000003AD 89DE                        mov     si,bx
   520 000003AF 01CE                        add     si,cx
   521 000003B1 50                          push    ax      ;coloca xc na pilha
   522 000003B2 56                          push    si      ;coloca yc+r na pilha
   523 000003B3 E89B00                      call line
   524                                      
   525                                          
   526 000003B6 89CF                        mov     di,cx
   527 000003B8 81EF0100                    sub     di,1     ;di=r-1
   528 000003BC BA0000                      mov     dx,0    ;dx serah a variavel x. cx eh a variavel y
   529                                      
   530                                  ;aqui em cima a logica foi invertida, 1-r => r-1
   531                                  ;e as comparacoes passaram a ser jl => jg, assim garante 
   532                                  ;valores positivos para d
   533                                  
   534                                  stay_full:              ;loop
   535 000003BF 89FE                        mov     si,di
   536 000003C1 81FE0000                    cmp     si,0
   537 000003C5 7F0E                        jg      inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   538 000003C7 89D6                        mov     si,dx       ;o jl eh importante porque trata-se de conta com sinal
   539 000003C9 D1E6                        sal     si,1        ;multiplica por doi (shift arithmetic left)
   540 000003CB 81C60300                    add     si,3
   541 000003CF 01F7                        add     di,si     ;nesse ponto d=d+2*dx+3
   542 000003D1 42                          inc     dx      ;incrementa dx
   543 000003D2 E90E00                      jmp     plotar_full
   544                                  inf_full:   
   545 000003D5 89D6                        mov     si,dx
   546 000003D7 29CE                        sub     si,cx       ;faz x - y (dx-cx), e salva em di 
   547 000003D9 D1E6                        sal     si,1
   548 000003DB 81C60500                    add     si,5
   549 000003DF 01F7                        add     di,si       ;nesse ponto d=d+2*(dx-cx)+5
   550 000003E1 42                          inc     dx      ;incrementa x (dx)
   551 000003E2 49                          dec     cx      ;decrementa y (cx)
   552                                      
   553                                  plotar_full:    
   554 000003E3 89C6                        mov     si,ax
   555 000003E5 01CE                        add     si,cx
   556 000003E7 56                          push    si      ;coloca a abcisa y+xc na pilha          
   557 000003E8 89DE                        mov     si,bx
   558 000003EA 29D6                        sub     si,dx
   559 000003EC 56                          push    si      ;coloca a ordenada yc-x na pilha
   560 000003ED 89C6                        mov     si,ax
   561 000003EF 01CE                        add     si,cx
   562 000003F1 56                          push    si      ;coloca a abcisa y+xc na pilha  
   563 000003F2 89DE                        mov     si,bx
   564 000003F4 01D6                        add     si,dx
   565 000003F6 56                          push    si      ;coloca a ordenada yc+x na pilha    
   566 000003F7 E85700                      call    line
   567                                      
   568 000003FA 89C6                        mov     si,ax
   569 000003FC 01D6                        add     si,dx
   570 000003FE 56                          push    si      ;coloca a abcisa xc+x na pilha          
   571 000003FF 89DE                        mov     si,bx
   572 00000401 29CE                        sub     si,cx
   573 00000403 56                          push    si      ;coloca a ordenada yc-y na pilha
   574 00000404 89C6                        mov     si,ax
   575 00000406 01D6                        add     si,dx
   576 00000408 56                          push    si      ;coloca a abcisa xc+x na pilha  
   577 00000409 89DE                        mov     si,bx
   578 0000040B 01CE                        add     si,cx
   579 0000040D 56                          push    si      ;coloca a ordenada yc+y na pilha    
   580 0000040E E84000                      call    line
   581                                      
   582 00000411 89C6                        mov     si,ax
   583 00000413 29D6                        sub     si,dx
   584 00000415 56                          push    si      ;coloca a abcisa xc-x na pilha          
   585 00000416 89DE                        mov     si,bx
   586 00000418 29CE                        sub     si,cx
   587 0000041A 56                          push    si      ;coloca a ordenada yc-y na pilha
   588 0000041B 89C6                        mov     si,ax
   589 0000041D 29D6                        sub     si,dx
   590 0000041F 56                          push    si      ;coloca a abcisa xc-x na pilha  
   591 00000420 89DE                        mov     si,bx
   592 00000422 01CE                        add     si,cx
   593 00000424 56                          push    si      ;coloca a ordenada yc+y na pilha    
   594 00000425 E82900                      call    line
   595                                      
   596 00000428 89C6                        mov     si,ax
   597 0000042A 29CE                        sub     si,cx
   598 0000042C 56                          push    si      ;coloca a abcisa xc-y na pilha          
   599 0000042D 89DE                        mov     si,bx
   600 0000042F 29D6                        sub     si,dx
   601 00000431 56                          push    si      ;coloca a ordenada yc-x na pilha
   602 00000432 89C6                        mov     si,ax
   603 00000434 29CE                        sub     si,cx
   604 00000436 56                          push    si      ;coloca a abcisa xc-y na pilha  
   605 00000437 89DE                        mov     si,bx
   606 00000439 01D6                        add     si,dx
   607 0000043B 56                          push    si      ;coloca a ordenada yc+x na pilha    
   608 0000043C E81200                      call    line
   609                                      
   610 0000043F 39D1                        cmp     cx,dx
   611 00000441 7203                        jb      fim_full_circle  ;se cx (y) estah abaixo de dx (x), termina     
   612 00000443 E979FF                      jmp     stay_full       ;se cx (y) estah acima de dx (x), continua no loop
   613                                      
   614                                      
   615                                  fim_full_circle:
   616 00000446 5F                          pop     di
   617 00000447 5E                          pop     si
   618 00000448 5A                          pop     dx
   619 00000449 59                          pop     cx
   620 0000044A 5B                          pop     bx
   621 0000044B 58                          pop     ax
   622 0000044C 9D                          popf
   623 0000044D 5D                          pop     bp
   624 0000044E C20600                      ret     6
   625                                  ;-----------------------------------------------------------------------------
   626                                  ;
   627                                  ;   funcao line
   628                                  ;
   629                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   630                                  line:
   631 00000451 55                              push    bp
   632 00000452 89E5                            mov     bp,sp
   633 00000454 9C                              pushf   ;coloca os flags na pilha
   634 00000455 50                              push    ax
   635 00000456 53                              push    bx
   636 00000457 51                              push    cx
   637 00000458 52                              push    dx
   638 00000459 56                              push    si
   639 0000045A 57                              push    di
   640 0000045B 8B460A                          mov     ax,[bp+10]   ; resgata os valores das coordenadas
   641 0000045E 8B5E08                          mov     bx,[bp+8]    ; resgata os valores das coordenadas
   642 00000461 8B4E06                          mov     cx,[bp+6]    ; resgata os valores das coordenadas
   643 00000464 8B5604                          mov     dx,[bp+4]    ; resgata os valores das coordenadas
   644 00000467 39C8                            cmp     ax,cx
   645 00000469 7408                            je      line2
   646 0000046B 721C                            jb      line1
   647 0000046D 91                              xchg    ax,cx
   648 0000046E 87DA                            xchg    bx,dx
   649 00000470 E91600                          jmp     line1
   650                                  line2:  ; deltax=0
   651 00000473 39D3                            cmp     bx,dx        ;subtrai dx de bx
   652 00000475 7202                            jb      line3
   653 00000477 87DA                            xchg    bx,dx        ;troca os valores de bx e dx entre eles
   654                                  line3:  ; dx > bx
   655 00000479 50                              push    ax
   656 0000047A 53                              push    bx
   657 0000047B E8EFFE                          call    plot_xy
   658 0000047E 39D3                            cmp     bx,dx
   659 00000480 7503                            jne     line31
   660 00000482 E9C600                          jmp     fim_line
   661 00000485 43                      line31:     inc     bx
   662 00000486 E9F0FF                          jmp     line3
   663                                  ;deltax <>0
   664                                  line1:
   665                                  ; comparar modulos de deltax e deltay sabendo que cx>ax
   666                                      ; cx > ax
   667 00000489 51                              push    cx
   668 0000048A 29C1                            sub     cx,ax
   669 0000048C 890E[0600]                      mov     [deltax],cx
   670 00000490 59                              pop     cx
   671 00000491 52                              push    dx
   672 00000492 29DA                            sub     dx,bx
   673 00000494 7702                            ja      line32
   674 00000496 F7DA                            neg     dx
   675                                  line32:     
   676 00000498 8916[0800]                      mov     [deltay],dx
   677 0000049C 5A                              pop     dx
   678                                  
   679 0000049D 50                              push    ax
   680 0000049E A1[0600]                        mov     ax,[deltax]
   681 000004A1 3B06[0800]                      cmp     ax,[deltay]
   682 000004A5 58                              pop     ax
   683 000004A6 724D                            jb      line5
   684                                  
   685                                      ; cx > ax e deltax>deltay
   686 000004A8 51                              push    cx
   687 000004A9 29C1                            sub     cx,ax
   688 000004AB 890E[0600]                      mov     [deltax],cx
   689 000004AF 59                              pop     cx
   690 000004B0 52                              push    dx
   691 000004B1 29DA                            sub     dx,bx
   692 000004B3 8916[0800]                      mov     [deltay],dx
   693 000004B7 5A                              pop     dx
   694                                  
   695 000004B8 89C6                            mov     si,ax
   696                                  line4:
   697 000004BA 50                              push    ax
   698 000004BB 52                              push    dx
   699 000004BC 56                              push    si
   700 000004BD 29C6                            sub     si,ax   ;(x-x1)
   701 000004BF A1[0800]                        mov     ax,[deltay]
   702 000004C2 F7EE                            imul    si
   703 000004C4 8B36[0600]                      mov     si,[deltax]     ;arredondar
   704 000004C8 D1EE                            shr     si,1
   705                                  ; se numerador (DX)>0 soma se <0 subtrai
   706 000004CA 81FA0000                        cmp     dx,0
   707 000004CE 7C09                            jl      ar1
   708 000004D0 01F0                            add     ax,si
   709 000004D2 81D20000                        adc     dx,0
   710 000004D6 E90600                          jmp     arc1
   711 000004D9 29F0                    ar1:        sub     ax,si
   712 000004DB 81DA0000                        sbb     dx,0
   713                                  arc1:
   714 000004DF F73E[0600]                      idiv    word [deltax]
   715 000004E3 01D8                            add     ax,bx
   716 000004E5 5E                              pop     si
   717 000004E6 56                              push    si
   718 000004E7 50                              push    ax
   719 000004E8 E882FE                          call    plot_xy
   720 000004EB 5A                              pop     dx
   721 000004EC 58                              pop     ax
   722 000004ED 39CE                            cmp     si,cx
   723 000004EF 745A                            je      fim_line
   724 000004F1 46                              inc     si
   725 000004F2 E9C5FF                          jmp     line4
   726                                  
   727 000004F5 39D3                    line5:      cmp     bx,dx
   728 000004F7 7203                            jb      line7
   729 000004F9 91                              xchg    ax,cx
   730 000004FA 87DA                            xchg    bx,dx
   731                                  line7:
   732 000004FC 51                              push    cx
   733 000004FD 29C1                            sub     cx,ax
   734 000004FF 890E[0600]                      mov     [deltax],cx
   735 00000503 59                              pop     cx
   736 00000504 52                              push    dx
   737 00000505 29DA                            sub     dx,bx
   738 00000507 8916[0800]                      mov     [deltay],dx
   739 0000050B 5A                              pop     dx
   740                                  
   741                                  
   742                                  
   743 0000050C 89DE                            mov     si,bx
   744                                  line6:
   745 0000050E 52                              push    dx
   746 0000050F 56                              push    si
   747 00000510 50                              push    ax
   748 00000511 29DE                            sub     si,bx   ;(y-y1)
   749 00000513 A1[0600]                        mov     ax,[deltax]
   750 00000516 F7EE                            imul    si
   751 00000518 8B36[0800]                      mov     si,[deltay]     ;arredondar
   752 0000051C D1EE                            shr     si,1
   753                                  ; se numerador (DX)>0 soma se <0 subtrai
   754 0000051E 81FA0000                        cmp     dx,0
   755 00000522 7C09                            jl      ar2
   756 00000524 01F0                            add     ax,si
   757 00000526 81D20000                        adc     dx,0
   758 0000052A E90600                          jmp     arc2
   759 0000052D 29F0                    ar2:        sub     ax,si
   760 0000052F 81DA0000                        sbb     dx,0
   761                                  arc2:
   762 00000533 F73E[0800]                      idiv    word [deltay]
   763 00000537 89C7                            mov     di,ax
   764 00000539 58                              pop     ax
   765 0000053A 01C7                            add     di,ax
   766 0000053C 5E                              pop     si
   767 0000053D 57                              push    di
   768 0000053E 56                              push    si
   769 0000053F E82BFE                          call    plot_xy
   770 00000542 5A                              pop     dx
   771 00000543 39D6                            cmp     si,dx
   772 00000545 7404                            je      fim_line
   773 00000547 46                              inc     si
   774 00000548 E9C3FF                          jmp     line6
   775                                  
   776                                  fim_line:
   777 0000054B 5F                              pop     di
   778 0000054C 5E                              pop     si
   779 0000054D 5A                              pop     dx
   780 0000054E 59                              pop     cx
   781 0000054F 5B                              pop     bx
   782 00000550 58                              pop     ax
   783 00000551 9D                              popf
   784 00000552 5D                              pop     bp
   785 00000553 C20800                          ret     8
   786                                  
   787                                  ;-----------------------------------------------------------------------------
   788                                  ; Função desenha_retangulo
   789                                  ; push x1; push y1; push x2; push y2; call desenha_retangulo
   790                                  ; O retângulo é definido pelos pontos (x1, y1) e (x2, y2)
   791                                  ; A cor é definida na variável 'cor'
   792                                  
   793                                  desenha_retangulo:
   794 00000556 55                          push    bp
   795 00000557 89E5                        mov     bp, sp
   796 00000559 9C                          pushf                 ; Coloca os flags na pilha
   797 0000055A 50                          push    ax
   798 0000055B 53                          push    bx
   799 0000055C 51                          push    cx
   800 0000055D 52                          push    dx
   801 0000055E 56                          push    si
   802 0000055F 57                          push    di
   803                                  
   804 00000560 8B460A                      mov     ax, [bp + 10]  ; Resgata x1
   805 00000563 8B5E08                      mov     bx, [bp + 8] ; Resgata y1
   806 00000566 8B4E06                      mov     cx, [bp + 6] ; Resgata x2
   807 00000569 8B5604                      mov     dx, [bp + 4] ; Resgata y2
   808                                  
   809                                      ; Desenha as linhas do retângulo
   810 0000056C 50                          push    ax ; Coloca x1 na pilha
   811 0000056D 53                          push    bx ; Coloca y1 na pilha
   812 0000056E 51                          push    cx ; Coloca x2 na pilha
   813 0000056F 53                          push    bx ; Mantém y1 na pilha (reta horizontal superior)
   814 00000570 E8DEFE                      call    line
   815                                  
   816 00000573 50                          push    ax ; Coloca x1 na pilha
   817 00000574 52                          push    dx ; Coloca y2 na pilha
   818 00000575 51                          push    cx ; Coloca x2 na pilha
   819 00000576 52                          push    dx ; Mantém y2 na pilha (reta horizontal inferior)
   820 00000577 E8D7FE                      call    line
   821                                  
   822 0000057A 50                          push    ax ; Coloca x1 na pilha
   823 0000057B 53                          push    bx ; Coloca y1 na pilha
   824 0000057C 50                          push    ax ; Mantém x1 na pilha (reta vertical à esquerda)
   825 0000057D 52                          push    dx ; Coloca y2 na pilha
   826 0000057E E8D0FE                      call    line
   827                                  
   828 00000581 51                          push    cx ; Coloca x2 na pilha
   829 00000582 53                          push    bx ; Coloca y1 na pilha
   830 00000583 51                          push    cx ; Mantém x2 na pilha (reta vertical à direita)
   831 00000584 52                          push    dx ; Coloca y2 na pilha
   832 00000585 E8C9FE                      call    line
   833                                  
   834 00000588 5F                          pop     di
   835 00000589 5E                          pop     si
   836 0000058A 5A                          pop     dx
   837 0000058B 59                          pop     cx
   838 0000058C 5B                          pop     bx
   839 0000058D 58                          pop     ax
   840 0000058E 9D                          popf
   841 0000058F 5D                          pop     bp
   842 00000590 C20800                      ret     8
   843                                  ;*******************************************************************
   844                                  segment data
   845                                  
   846 00000000 0F                      cor     db      branco_intenso
   847                                  
   848                                  ;   I R G B COR
   849                                  ;   0 0 0 0 preto
   850                                  ;   0 0 0 1 azul
   851                                  ;   0 0 1 0 verde
   852                                  ;   0 0 1 1 cyan
   853                                  ;   0 1 0 0 vermelho
   854                                  ;   0 1 0 1 magenta
   855                                  ;   0 1 1 0 marrom
   856                                  ;   0 1 1 1 branco
   857                                  ;   1 0 0 0 cinza
   858                                  ;   1 0 0 1 azul claro
   859                                  ;   1 0 1 0 verde claro
   860                                  ;   1 0 1 1 cyan claro
   861                                  ;   1 1 0 0 rosa
   862                                  ;   1 1 0 1 magenta claro
   863                                  ;   1 1 1 0 amarelo
   864                                  ;   1 1 1 1 branco intenso
   865                                  
   866                                  preto           equ     0
   867                                  azul            equ     1
   868                                  verde           equ     2
   869                                  vermelho        equ     4
   870                                  branco          equ     7
   871                                  branco_intenso  equ     15
   872                                  
   873 00000001 00                      modo_anterior    db      0
   874 00000002 0000                    linha            dw      0
   875 00000004 0000                    coluna           dw      0
   876 00000006 0000                    deltax           dw      0
   877 00000008 0000                    deltay           dw      0   
   878 0000000A 45786572636963696F-     mens1            db      'Exercicio de Programacao de Sistemas Embarcados 1 2023/2'
   879 00000013 2064652050726F6772-
   880 0000001C 616D6163616F206465-
   881 00000025 2053697374656D6173-
   882 0000002E 20456D626172636164-
   883 00000037 6F7320312032303233-
   884 00000040 2F32               
   885 00000042 5061747269636B2043-     mens2            db      'Patrick Catrinck  00  x  00  Computador                          Delay (03/03)'
   886 0000004B 617472696E636B2020-
   887 00000054 303020207820203030-
   888 0000005D 2020436F6D70757461-
   889 00000066 646F72202020202020-
   890 0000006F 202020202020202020-
   891 00000078 202020202020202020-
   892 00000081 202044656C61792028-
   893 0000008A 30332F303329       
   894 00000090 204E                    delay            dw      20000
   895 00000092 0100                    vx               dw      1
   896 00000094 0100                    vy               dw      1
   897 00000096 0000                    vy_ret           dw      0        ;velocidade em y do retangulo
   898 00000098 4001                    p_bx             dw      320      ;posicao bola x
   899 0000009A F000                    p_by             dw      240      ;posicao bola y
   900 0000009C 5802                    p_px             dw      600      ;posicao paddle x
   901 0000009E FF00                    p_py             dw      255      ;posicao paddle y
   902 000000A0 6202                    p_pxl            dw      610      ;posicao paddle x + largura (10)
   903 000000A2 D700                    p_pya            dw      215      ;posicao paddle y - altura  (50)
   904 000000A4 0000                    ponto_jogador    dw      0
   905 000000A6 0000                    ponto_computador dw      0
   906 000000A8 3030                    string_ponto_computador        db      "00"  
   907 000000AA 3030                    string_ponto_jogador           db      "00"  
   908 000000AC 30                      string_tempo                   db      "0"  
   909                                  
   910                                  ;*************************************************************************
   911                                  segment stack stack
   912 00000000 <res 00000200>                      resb        512
   913                                  stacktop:
