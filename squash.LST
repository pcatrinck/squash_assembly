     1                                  ; autor: Patrick Dias Catrinck
     2                                  ; Trabalho de programação da disciplina de Sistemas Embarcados
     3                                  ; Função circle e full_circle disponibilizados por Jefferson Moro em 10/2009
     4                                  
     5                                  segment code
     6                                  ..start:
     7 00000000 B8[0000]                        mov         ax,data
     8 00000003 8ED8                            mov         ds,ax
     9 00000005 B8[0000]                        mov         ax,stack
    10 00000008 8ED0                            mov         ss,ax
    11 0000000A BC[0002]                        mov         sp,stacktop
    12                                  
    13                                  ; salvar modo corrente de video(vendo como esta o modo de video da maquina)
    14 0000000D B40F                            mov     ah,0Fh
    15 0000000F CD10                            int     10h
    16 00000011 A2[0100]                        mov     [modo_anterior],al   
    17                                  
    18                                  ; alterar modo de video para grafico 640x480 16 cores
    19 00000014 B012                            mov     al,12h
    20 00000016 B400                            mov     ah,0
    21 00000018 CD10                            int     10h
    22                                  
    23                                  ;desenhar retas
    24                                  
    25 0000001A C606[0000]0F                    mov     byte[cor],branco_intenso    ;baixo
    26 0000001F B80000                          mov     ax,0
    27 00000022 50                              push    ax
    28 00000023 B80000                          mov     ax,0
    29 00000026 50                              push    ax
    30 00000027 B87F02                          mov     ax,639
    31 0000002A 50                              push    ax
    32 0000002B B80000                          mov     ax,0
    33 0000002E 50                              push    ax
    34 0000002F E8E903                          call    line
    35                                  
    36                                  
    37 00000032 C606[0000]0F                    mov     byte[cor],branco_intenso    ;esquerda
    38 00000037 B80000                          mov     ax,0
    39 0000003A 50                              push    ax
    40 0000003B B80000                          mov     ax,0
    41 0000003E 50                              push    ax
    42 0000003F B80000                          mov     ax,0
    43 00000042 50                              push    ax
    44 00000043 B8DF01                          mov     ax,479
    45 00000046 50                              push    ax
    46 00000047 E8D103                          call    line
    47                                  
    48 0000004A C606[0000]0F                    mov     byte[cor],branco_intenso    ;cima
    49 0000004F B80000                          mov     ax,0
    50 00000052 50                              push    ax
    51 00000053 B8DF01                          mov     ax,479
    52 00000056 50                              push    ax
    53 00000057 B87F02                          mov     ax,639
    54 0000005A 50                              push    ax
    55 0000005B B8DF01                          mov     ax,479
    56 0000005E 50                              push    ax
    57 0000005F E8B903                          call    line
    58                                  
    59 00000062 C606[0000]0F                    mov     byte[cor],branco_intenso    ;direita
    60 00000067 B87F02                          mov     ax,639
    61 0000006A 50                              push    ax
    62 0000006B B80000                          mov     ax,0
    63 0000006E 50                              push    ax
    64 0000006F B87F02                          mov     ax,639
    65 00000072 50                              push    ax
    66 00000073 B8DF01                          mov     ax,479
    67 00000076 50                              push    ax
    68 00000077 E8A103                          call    line
    69                                  
    70 0000007A C606[0000]0F                    mov     byte[cor],branco_intenso    ;titulo
    71 0000007F B80000                          mov     ax,0
    72 00000082 50                              push    ax
    73 00000083 B8B801                          mov     ax,440
    74 00000086 50                              push    ax
    75 00000087 B87F02                          mov     ax,639
    76 0000008A 50                              push    ax
    77 0000008B B8B801                          mov     ax,440
    78 0000008E 50                              push    ax
    79 0000008F E88903                          call    line
    80                                          
    81                                  ;desenha circulos 
    82 00000092 C606[0000]04                    mov     byte[cor],vermelho
    83 00000097 A1[9800]                        mov     ax,word[p_bx]
    84 0000009A 50                              push    ax
    85 0000009B A1[9A00]                        mov     ax,word[p_by]
    86 0000009E 50                              push    ax
    87 0000009F B80A00                          mov     ax,10
    88 000000A2 50                              push    ax
    89 000000A3 E8B802                          call    full_circle
    90                                  
    91                                  ;desenha o paddle
    92 000000A6 C606[0000]07                    mov     byte[cor],branco
    93 000000AB A1[9C00]                        mov     ax,[p_px]
    94 000000AE 50                              push    ax
    95 000000AF A1[9E00]                        mov     ax,[p_py]
    96 000000B2 50                              push    ax
    97 000000B3 A1[A000]                        mov     ax,[p_pxl]
    98 000000B6 50                              push    ax
    99 000000B7 A1[A200]                        mov     ax,[p_pya]
   100 000000BA 50                              push    ax
   101 000000BB E86204                          call    desenha_retangulo
   102                                  
   103                                  ;escrever o cabecalho
   104 000000BE B93800                          mov     cx,56			;numero de caracteres
   105 000000C1 BB0000                          mov     bx,0
   106 000000C4 B600                            mov     dh,0			;linha 0-29
   107 000000C6 B200                            mov     dl,0 			;coluna 0-79
   108 000000C8 C606[0000]07                    mov	byte[cor],branco
   109                                  
   110                                  escreve1:
   111 000000CD E83202                          call    cursor
   112 000000D0 8A87[0A00]                      mov     al,[bx+mens1]
   113 000000D4 E84202                          call    caracter
   114 000000D7 43                              inc     bx	                ;proximo caracter
   115 000000D8 FEC2                            inc     dl	                ;avanca a coluna
   116 000000DA E2F1                            loop    escreve1
   117                                  
   118 000000DC B94E00                          mov     cx,78			;numero de caracteres
   119 000000DF BB0000                          mov     bx,0
   120 000000E2 B601                            mov     dh,1			;linha 0-29
   121 000000E4 B200                            mov     dl,0 			;coluna 0-79
   122 000000E6 C606[0000]07                    mov	byte[cor],branco
   123                                  
   124                                  escreve2:
   125 000000EB E81402                          call    cursor
   126 000000EE 8A87[4200]                      mov     al,[bx+mens2]
   127 000000F2 E82402                          call    caracter
   128 000000F5 43                              inc     bx	                ;proximo caracter
   129 000000F6 FEC2                            inc     dl	                ;avanca a coluna
   130 000000F8 E2F1                            loop    escreve2
   131                                  
   132                                  nova_bola:
   133 000000FA C606[0000]00                    mov     byte[cor],preto ; apaga a bola anterior
   134 000000FF A1[9800]                        mov     ax,[p_bx]
   135 00000102 50                              push    ax
   136 00000103 A1[9A00]                        mov     ax,[p_by]
   137 00000106 50                              push    ax
   138 00000107 B80A00                          mov     ax,10
   139 0000010A 50                              push    ax
   140 0000010B E85002                          call    full_circle
   141 0000010E 8B1E[9200]                      mov     bx, [vx]
   142 00000112 011E[9800]                      add     [p_bx], bx
   143 00000116 8B1E[9400]                      mov     bx, [vy]
   144 0000011A 011E[9A00]                      add     [p_by], bx
   145                                  
   146 0000011E C606[0000]04                    mov     byte[cor],vermelho
   147 00000123 A1[9800]                        mov     ax,[p_bx]
   148 00000126 50                              push    ax
   149 00000127 A1[9A00]                        mov     ax,[p_by]
   150 0000012A 50                              push    ax
   151 0000012B B80A00                          mov     ax,10
   152 0000012E 50                              push    ax
   153 0000012F E82C02                          call    full_circle
   154                                  
   155                                  novo_retangulo:
   156 00000132 C606[0000]00                    mov     byte[cor],preto
   157 00000137 A1[9C00]                        mov     ax,[p_px]
   158 0000013A 50                              push    ax
   159 0000013B A1[9E00]                        mov     ax,[p_py]
   160 0000013E 50                              push    ax
   161 0000013F A1[A000]                        mov     ax,[p_pxl]
   162 00000142 50                              push    ax
   163 00000143 A1[A200]                        mov     ax,[p_pya]
   164 00000146 50                              push    ax
   165 00000147 E8D603                          call    desenha_retangulo
   166                                  
   167 0000014A 8B1E[9600]                      mov bx, [vy_ret]
   168 0000014E 011E[9E00]                      add [p_py], bx
   169 00000152 011E[A200]                      add [p_pya], bx
   170                                  
   171 00000156 C606[0000]07                    mov     byte[cor],branco
   172 0000015B A1[9C00]                        mov     ax,[p_px]
   173 0000015E 50                              push    ax
   174 0000015F A1[9E00]                        mov     ax,[p_py]
   175 00000162 50                              push    ax
   176 00000163 A1[A000]                        mov     ax,[p_pxl]
   177 00000166 50                              push    ax
   178 00000167 A1[A200]                        mov     ax,[p_pya]
   179 0000016A 50                              push    ax
   180 0000016B E8B203                          call    desenha_retangulo
   181                                  
   182                                  delay: ; Esteja atento pois talvez seja importante salvar contexto (no caso, CX, o que NÃO foi feito aqui).
   183 0000016E 8B0E[9000]                      mov cx, word [velocidade] ; Carrega “velocidade” em cx (contador para loop)        
   184                                  del2:
   185 00000172 51                              push cx ; Coloca cx na pilha para usa-lo em outro loop
   186 00000173 B95000                          mov  cx, 050h
   187                                  del1:
   188 00000176 BE7402                          mov si, 628
   189 00000179 3936[9800]                      cmp [p_bx], si
   190 0000017D 7464                            jz reflete_direita
   191                                  
   192 0000017F BE0A00                          mov si, 10
   193 00000182 3936[9800]                      cmp [p_bx], si
   194 00000186 746E                            jz reflete_esquerda
   195                                  
   196 00000188 BEAD01                          mov si, 429
   197 0000018B 3936[9A00]                      cmp [p_by], si
   198 0000018F 7443                            jz call_reflete_cima
   199 00000191 3936[9E00]                      cmp [p_py], si
   200 00000195 7472                            jz descendo
   201                                  
   202 00000197 BE0B00                          mov si, 11
   203 0000019A 3936[9A00]                      cmp [p_by], si
   204 0000019E 7437                            jz call_reflete_baixo
   205 000001A0 3936[A200]                      cmp [p_pya], si
   206 000001A4 746D                            jz subindo
   207                                  
   208 000001A6 8B36[9C00]                      mov si, [p_px]
   209 000001AA 81C6F6FF                        add si, -10 ; raio
   210 000001AE 3936[9800]                      cmp [p_bx], si
   211 000001B2 747D                            je checa_topo
   212                                  
   213 000001B4 B40B                            mov ah, 0bh    ;BIOS.TestKey
   214 000001B6 CD21                            int 21h
   215 000001B8 3C00                            cmp al, 0
   216 000001BA 7521                            jne call_jne_keyboard
   217 000001BC E90000                          jmp continua
   218                                  continua:
   219 000001BF E838FF                          call nova_bola
   220 000001C2 E86DFF                          call novo_retangulo
   221 000001C5 59                              pop cx
   222 000001C6 E2AE                            loop del1
   223 000001C8 E2A8                            loop del2
   224 000001CA C3                              ret
   225 000001CB E8A0FF                  call delay
   226 000001CE E8A5FF                  call del1
   227 000001D1 E89EFF                  call del2
   228                                  
   229                                  call_reflete_cima:
   230 000001D4 E94600                          jmp reflete_cima
   231                                  call_reflete_baixo:
   232 000001D7 E94D00                          jmp reflete_baixo
   233                                  call_marca_ponto_jogador:
   234 000001DA E9DD00                          jmp marca_ponto_jogador
   235                                  call_jne_keyboard:
   236 000001DD E97300                          jmp keyboard
   237                                  call_continua:
   238 000001E0 E9DCFF                          jmp continua
   239                                  
   240                                  reflete_direita:
   241 000001E3 BBFFFF                          mov bx, -1
   242 000001E6 891E[9200]                      mov [vx], bx
   243 000001EA BB7402                          mov bx, 628
   244 000001ED 391E[9800]                      cmp [p_bx], bx
   245 000001F1 7478                            jz  call_marca_ponto_computador
   246 000001F3 E9C9FF                          jmp continua
   247                                  reflete_esquerda:
   248 000001F6 BB0100                          mov bx, 1
   249 000001F9 891E[9200]                      mov [vx], bx
   250 000001FD BB0A00                          mov bx, 10
   251 00000200 391E[9800]                      cmp [p_bx], bx
   252 00000204 74D4                            jz  call_marca_ponto_jogador
   253 00000206 E9B6FF                          jmp continua
   254                                  descendo:
   255 00000209 BBFFFF                          mov bx,-1
   256 0000020C 891E[9600]                      mov [vy_ret], bx
   257 00000210 E9ACFF                          jmp continua
   258                                  subindo:
   259 00000213 BB0100                          mov bx,1
   260 00000216 891E[9600]                      mov [vy_ret], bx
   261 0000021A E9A2FF                          jmp continua
   262                                  reflete_cima:
   263 0000021D BBFFFF                          mov bx, -1
   264 00000220 891E[9400]                      mov [vy], bx
   265 00000224 E9B9FF                          jmp call_continua
   266                                  reflete_baixo:
   267 00000227 BB0100                          mov bx, 1
   268 0000022A 891E[9400]                      mov [vy], bx
   269 0000022E E9AFFF                          jmp call_continua
   270                                  checa_topo:
   271 00000231 8B1E[9E00]                      mov bx, [p_py]
   272 00000235 81C30200                        add bx, 2 ; margem
   273 00000239 391E[9A00]                      cmp [p_by], bx
   274 0000023D 7E03                            jle checa_base
   275 0000023F E99EFF                          jmp call_continua
   276                                  checa_base:
   277 00000242 8B1E[A200]                      mov bx, [p_pya]
   278 00000246 81C3FEFF                        add bx, -2
   279 0000024A 391E[9A00]                      cmp [p_by], bx
   280 0000024E 7C90                            jnge call_continua
   281 00000250 E890FF                          call reflete_direita
   282                                  
   283                                  keyboard:
   284 00000253 B408                            mov ah, 08H ;Ler caracter da STDIN
   285 00000255 CD21                            int 21H
   286 00000257 3C63                            cmp al, 'c'
   287 00000259 74B8                            jz subindo
   288 0000025B 3C62                            cmp al, 'b'
   289 0000025D 74AA                            jz descendo
   290 0000025F 3C70                            cmp al, 'p'
   291 00000261 7419                            jz rapido
   292 00000263 3C6D                            cmp al, 'm'
   293 00000265 7407                            jz devagar
   294 00000267 3C73                            cmp al, 's'
   295 00000269 741F                            jz encerra
   296                                  
   297                                  call_marca_ponto_computador:
   298 0000026B E92800                      jmp marca_ponto_computador
   299                                  
   300                                  devagar:
   301 0000026E BBFFFF                          mov bx, -1
   302 00000271 011E[9200]                      add[vx], bx
   303 00000275 011E[9400]                      add[vy], bx
   304 00000279 E943FF                          jmp continua
   305                                  rapido:
   306 0000027C BB0100                          mov bx, 1
   307 0000027F 011E[9200]                      add[vx], bx
   308 00000283 011E[9400]                      add[vy], bx
   309 00000287 E935FF                          jmp continua
   310                                  
   311                                  encerra:
   312 0000028A B400                            mov ah,0 ; set video mode
   313 0000028C A0[0100]                        mov al,[modo_anterior] ; recupera o modo anterior
   314 0000028F CD10                            int 10h
   315 00000291 B8004C                          mov ax,4c00h
   316 00000294 CD21                            int 21h
   317                                  
   318                                  marca_ponto_computador:
   319 00000296 A1[A600]                        mov     ax, [ponto_computador]
   320 00000299 050100                          add     ax, 1
   321 0000029C A3[A600]                        mov     [ponto_computador], ax
   322 0000029F A1[A600]                        mov     ax, [ponto_computador]  
   323 000002A2 E84700                          call    converte_para_ascii     
   324 000002A5 BB[A800]                        mov     bx, string_ponto_computador       
   325 000002A8 B90200                          mov     cx, 2                   
   326 000002AB B601                            mov     dh, 1                 
   327 000002AD B219                            mov     dl, 25                  
   328 000002AF C606[0000]04                    mov     byte [cor], vermelho    
   329 000002B4 E82700                          call    escreve_valor_loop
   330 000002B7 E905FF                          jmp     continua
   331                                  
   332                                  marca_ponto_jogador:
   333 000002BA A1[A400]                        mov ax, [ponto_jogador]
   334 000002BD 050100                          add ax, 1
   335 000002C0 A3[A400]                        mov [ponto_jogador], ax
   336 000002C3 A1[A400]                        mov     ax, [ponto_jogador]  
   337 000002C6 E82300                          call    converte_para_ascii  
   338 000002C9 BB[A800]                        mov     bx, string_ponto_computador       
   339 000002CC B90200                          mov     cx, 2       
   340 000002CF B601                            mov     dh, 1        
   341 000002D1 B212                            mov     dl, 18          
   342 000002D3 C606[0000]01                    mov     byte [cor], azul  
   343 000002D8 E80300                          call    escreve_valor_loop
   344 000002DB E9E1FE                          jmp     continua
   345                                  
   346                                  escreve_valor_loop:
   347 000002DE E82100                          call    cursor
   348 000002E1 8A07                            mov     al, [bx]             
   349 000002E3 E83300                          call    caracter
   350 000002E6 43                              inc     bx                    
   351 000002E7 FEC2                            inc     dl  
   352 000002E9 E2F3                            loop    escreve_valor_loop
   353 000002EB C3                              ret
   354                                  
   355                                  converte_para_ascii:
   356 000002EC 50                              push    ax                               ; empilha ax
   357 000002ED 31D2                            xor     dx, dx                           ; limpa dx antes de dividir
   358 000002EF B90A00                          mov     cx, 10                           ; numerador recebe 10
   359 000002F2 F7F1                            div     cx                               ; divide ax por 10
   360 000002F4 80C230                          add     dl, '0'                          ; soma o valor do caracter 0 em ascii, para converter as dezenas
   361 000002F7 8816[A900]                      mov     [string_ponto_computador+1], dl  ; guarda as unidades na casa do lado
   362 000002FB 0430                            add     al, '0'                          ; converte pra ascii
   363 000002FD A2[A800]                        mov     [string_ponto_computador], al    ; termina de armazenar o resultado
   364 00000300 58                              pop     ax                               ; restaura o valor de ax
   365 00000301 C3                              ret
   366                                  
   367                                  ;   funcao cursor
   368                                  ;
   369                                  ; dh = linha (0-29) e  dl=coluna  (0-79)
   370                                  cursor:
   371 00000302 9C                              pushf
   372 00000303 50                              push    ax
   373 00000304 53                              push    bx
   374 00000305 51                              push    cx
   375 00000306 52                              push    dx
   376 00000307 56                              push    si
   377 00000308 57                              push    di
   378 00000309 55                              push    bp
   379 0000030A B402                            mov     ah,2
   380 0000030C B700                            mov     bh,0
   381 0000030E CD10                            int     10h
   382 00000310 5D                              pop     bp
   383 00000311 5F                              pop     di
   384 00000312 5E                              pop     si
   385 00000313 5A                              pop     dx
   386 00000314 59                              pop     cx
   387 00000315 5B                              pop     bx
   388 00000316 58                              pop     ax
   389 00000317 9D                              popf
   390 00000318 C3                              ret
   391                                  ;_____________________________________________________________________________
   392                                  ;
   393                                  ;   funcao caracter escrito na posicao do cursor
   394                                  ;
   395                                  ; al= caracter a ser escrito
   396                                  ; cor definida na variavel cor
   397                                  caracter:
   398 00000319 9C                              pushf
   399 0000031A 50                              push        ax
   400 0000031B 53                              push        bx
   401 0000031C 51                              push        cx
   402 0000031D 52                              push        dx
   403 0000031E 56                              push        si
   404 0000031F 57                              push        di
   405 00000320 55                              push        bp
   406 00000321 B409                            mov         ah,9
   407 00000323 B700                            mov         bh,0
   408 00000325 B90100                          mov         cx,1
   409 00000328 8A1E[0000]                      mov         bl,[cor]
   410 0000032C CD10                            int         10h
   411 0000032E 5D                              pop     bp
   412 0000032F 5F                              pop     di
   413 00000330 5E                              pop     si
   414 00000331 5A                              pop     dx
   415 00000332 59                              pop     cx
   416 00000333 5B                              pop     bx
   417 00000334 58                              pop     ax
   418 00000335 9D                              popf
   419 00000336 C3                              ret
   420                                  ;_____________________________________________________________________________
   421                                  ;
   422                                  ;   funcao plot_xy
   423                                  ;
   424                                  ; push x; push y; call plot_xy;  (x<639, y<479)
   425                                  ; cor definida na variavel cor
   426                                  plot_xy:
   427 00000337 55                              push        bp
   428 00000338 89E5                            mov     bp,sp
   429 0000033A 9C                              pushf
   430 0000033B 50                              push        ax
   431 0000033C 53                              push        bx
   432 0000033D 51                              push        cx
   433 0000033E 52                              push        dx
   434 0000033F 56                              push        si
   435 00000340 57                              push        di
   436 00000341 B40C                            mov         ah,0ch
   437 00000343 A0[0000]                        mov         al,[cor]
   438 00000346 B700                            mov         bh,0
   439 00000348 BADF01                          mov         dx,479
   440 0000034B 2B5604                          sub     dx,[bp+4]
   441 0000034E 8B4E06                          mov         cx,[bp+6]
   442 00000351 CD10                            int         10h
   443 00000353 5F                              pop     di
   444 00000354 5E                              pop     si
   445 00000355 5A                              pop     dx
   446 00000356 59                              pop     cx
   447 00000357 5B                              pop     bx
   448 00000358 58                              pop     ax
   449 00000359 9D                              popf
   450 0000035A 5D                              pop     bp
   451 0000035B C20400                          ret     4
   452                                  
   453                                  ;-----------------------------------------------------------------------------
   454                                  ;    funcao full_circle
   455                                  ;    push xc; push yc; push r; call full_circle;  (xc+r<639,yc+r<479)e(xc-r>0,yc-r>0)
   456                                  ; cor definida na variavel cor                    
   457                                  full_circle:
   458 0000035E 55                          push    bp
   459 0000035F 89E5                        mov     bp,sp
   460 00000361 9C                          pushf                        ;coloca os flags na pilha
   461 00000362 50                          push    ax
   462 00000363 53                          push    bx
   463 00000364 51                          push    cx
   464 00000365 52                          push    dx
   465 00000366 56                          push    si
   466 00000367 57                          push    di
   467                                  
   468 00000368 8B4608                      mov     ax,[bp+8]    ; resgata xc
   469 0000036B 8B5E06                      mov     bx,[bp+6]    ; resgata yc
   470 0000036E 8B4E04                      mov     cx,[bp+4]    ; resgata r
   471                                      
   472 00000371 89DE                        mov     si,bx
   473 00000373 29CE                        sub     si,cx
   474 00000375 50                          push    ax          ;coloca xc na pilha         
   475 00000376 56                          push    si          ;coloca yc-r na pilha
   476 00000377 89DE                        mov     si,bx
   477 00000379 01CE                        add     si,cx
   478 0000037B 50                          push    ax      ;coloca xc na pilha
   479 0000037C 56                          push    si      ;coloca yc+r na pilha
   480 0000037D E89B00                      call line
   481                                      
   482                                          
   483 00000380 89CF                        mov     di,cx
   484 00000382 81EF0100                    sub     di,1     ;di=r-1
   485 00000386 BA0000                      mov     dx,0    ;dx serah a variavel x. cx eh a variavel y
   486                                      
   487                                  ;aqui em cima a logica foi invertida, 1-r => r-1
   488                                  ;e as comparacoes passaram a ser jl => jg, assim garante 
   489                                  ;valores positivos para d
   490                                  
   491                                  stay_full:              ;loop
   492 00000389 89FE                        mov     si,di
   493 0000038B 81FE0000                    cmp     si,0
   494 0000038F 7F0E                        jg      inf_full       ;caso d for menor que 0, seleciona pixel superior (n�o  salta)
   495 00000391 89D6                        mov     si,dx       ;o jl eh importante porque trata-se de conta com sinal
   496 00000393 D1E6                        sal     si,1        ;multiplica por doi (shift arithmetic left)
   497 00000395 81C60300                    add     si,3
   498 00000399 01F7                        add     di,si     ;nesse ponto d=d+2*dx+3
   499 0000039B 42                          inc     dx      ;incrementa dx
   500 0000039C E90E00                      jmp     plotar_full
   501                                  inf_full:   
   502 0000039F 89D6                        mov     si,dx
   503 000003A1 29CE                        sub     si,cx       ;faz x - y (dx-cx), e salva em di 
   504 000003A3 D1E6                        sal     si,1
   505 000003A5 81C60500                    add     si,5
   506 000003A9 01F7                        add     di,si       ;nesse ponto d=d+2*(dx-cx)+5
   507 000003AB 42                          inc     dx      ;incrementa x (dx)
   508 000003AC 49                          dec     cx      ;decrementa y (cx)
   509                                      
   510                                  plotar_full:    
   511 000003AD 89C6                        mov     si,ax
   512 000003AF 01CE                        add     si,cx
   513 000003B1 56                          push    si      ;coloca a abcisa y+xc na pilha          
   514 000003B2 89DE                        mov     si,bx
   515 000003B4 29D6                        sub     si,dx
   516 000003B6 56                          push    si      ;coloca a ordenada yc-x na pilha
   517 000003B7 89C6                        mov     si,ax
   518 000003B9 01CE                        add     si,cx
   519 000003BB 56                          push    si      ;coloca a abcisa y+xc na pilha  
   520 000003BC 89DE                        mov     si,bx
   521 000003BE 01D6                        add     si,dx
   522 000003C0 56                          push    si      ;coloca a ordenada yc+x na pilha    
   523 000003C1 E85700                      call    line
   524                                      
   525 000003C4 89C6                        mov     si,ax
   526 000003C6 01D6                        add     si,dx
   527 000003C8 56                          push    si      ;coloca a abcisa xc+x na pilha          
   528 000003C9 89DE                        mov     si,bx
   529 000003CB 29CE                        sub     si,cx
   530 000003CD 56                          push    si      ;coloca a ordenada yc-y na pilha
   531 000003CE 89C6                        mov     si,ax
   532 000003D0 01D6                        add     si,dx
   533 000003D2 56                          push    si      ;coloca a abcisa xc+x na pilha  
   534 000003D3 89DE                        mov     si,bx
   535 000003D5 01CE                        add     si,cx
   536 000003D7 56                          push    si      ;coloca a ordenada yc+y na pilha    
   537 000003D8 E84000                      call    line
   538                                      
   539 000003DB 89C6                        mov     si,ax
   540 000003DD 29D6                        sub     si,dx
   541 000003DF 56                          push    si      ;coloca a abcisa xc-x na pilha          
   542 000003E0 89DE                        mov     si,bx
   543 000003E2 29CE                        sub     si,cx
   544 000003E4 56                          push    si      ;coloca a ordenada yc-y na pilha
   545 000003E5 89C6                        mov     si,ax
   546 000003E7 29D6                        sub     si,dx
   547 000003E9 56                          push    si      ;coloca a abcisa xc-x na pilha  
   548 000003EA 89DE                        mov     si,bx
   549 000003EC 01CE                        add     si,cx
   550 000003EE 56                          push    si      ;coloca a ordenada yc+y na pilha    
   551 000003EF E82900                      call    line
   552                                      
   553 000003F2 89C6                        mov     si,ax
   554 000003F4 29CE                        sub     si,cx
   555 000003F6 56                          push    si      ;coloca a abcisa xc-y na pilha          
   556 000003F7 89DE                        mov     si,bx
   557 000003F9 29D6                        sub     si,dx
   558 000003FB 56                          push    si      ;coloca a ordenada yc-x na pilha
   559 000003FC 89C6                        mov     si,ax
   560 000003FE 29CE                        sub     si,cx
   561 00000400 56                          push    si      ;coloca a abcisa xc-y na pilha  
   562 00000401 89DE                        mov     si,bx
   563 00000403 01D6                        add     si,dx
   564 00000405 56                          push    si      ;coloca a ordenada yc+x na pilha    
   565 00000406 E81200                      call    line
   566                                      
   567 00000409 39D1                        cmp     cx,dx
   568 0000040B 7203                        jb      fim_full_circle  ;se cx (y) estah abaixo de dx (x), termina     
   569 0000040D E979FF                      jmp     stay_full       ;se cx (y) estah acima de dx (x), continua no loop
   570                                      
   571                                      
   572                                  fim_full_circle:
   573 00000410 5F                          pop     di
   574 00000411 5E                          pop     si
   575 00000412 5A                          pop     dx
   576 00000413 59                          pop     cx
   577 00000414 5B                          pop     bx
   578 00000415 58                          pop     ax
   579 00000416 9D                          popf
   580 00000417 5D                          pop     bp
   581 00000418 C20600                      ret     6
   582                                  ;-----------------------------------------------------------------------------
   583                                  ;
   584                                  ;   funcao line
   585                                  ;
   586                                  ; push x1; push y1; push x2; push y2; call line;  (x<639, y<479)
   587                                  line:
   588 0000041B 55                              push    bp
   589 0000041C 89E5                            mov     bp,sp
   590 0000041E 9C                              pushf   ;coloca os flags na pilha
   591 0000041F 50                              push    ax
   592 00000420 53                              push    bx
   593 00000421 51                              push    cx
   594 00000422 52                              push    dx
   595 00000423 56                              push    si
   596 00000424 57                              push    di
   597 00000425 8B460A                          mov     ax,[bp+10]   ; resgata os valores das coordenadas
   598 00000428 8B5E08                          mov     bx,[bp+8]    ; resgata os valores das coordenadas
   599 0000042B 8B4E06                          mov     cx,[bp+6]    ; resgata os valores das coordenadas
   600 0000042E 8B5604                          mov     dx,[bp+4]    ; resgata os valores das coordenadas
   601 00000431 39C8                            cmp     ax,cx
   602 00000433 7408                            je      line2
   603 00000435 721C                            jb      line1
   604 00000437 91                              xchg    ax,cx
   605 00000438 87DA                            xchg    bx,dx
   606 0000043A E91600                          jmp     line1
   607                                  line2:  ; deltax=0
   608 0000043D 39D3                            cmp     bx,dx        ;subtrai dx de bx
   609 0000043F 7202                            jb      line3
   610 00000441 87DA                            xchg    bx,dx        ;troca os valores de bx e dx entre eles
   611                                  line3:  ; dx > bx
   612 00000443 50                              push    ax
   613 00000444 53                              push    bx
   614 00000445 E8EFFE                          call    plot_xy
   615 00000448 39D3                            cmp     bx,dx
   616 0000044A 7503                            jne     line31
   617 0000044C E9C600                          jmp     fim_line
   618 0000044F 43                      line31:     inc     bx
   619 00000450 E9F0FF                          jmp     line3
   620                                  ;deltax <>0
   621                                  line1:
   622                                  ; comparar modulos de deltax e deltay sabendo que cx>ax
   623                                      ; cx > ax
   624 00000453 51                              push    cx
   625 00000454 29C1                            sub     cx,ax
   626 00000456 890E[0600]                      mov     [deltax],cx
   627 0000045A 59                              pop     cx
   628 0000045B 52                              push    dx
   629 0000045C 29DA                            sub     dx,bx
   630 0000045E 7702                            ja      line32
   631 00000460 F7DA                            neg     dx
   632                                  line32:     
   633 00000462 8916[0800]                      mov     [deltay],dx
   634 00000466 5A                              pop     dx
   635                                  
   636 00000467 50                              push    ax
   637 00000468 A1[0600]                        mov     ax,[deltax]
   638 0000046B 3B06[0800]                      cmp     ax,[deltay]
   639 0000046F 58                              pop     ax
   640 00000470 724D                            jb      line5
   641                                  
   642                                      ; cx > ax e deltax>deltay
   643 00000472 51                              push    cx
   644 00000473 29C1                            sub     cx,ax
   645 00000475 890E[0600]                      mov     [deltax],cx
   646 00000479 59                              pop     cx
   647 0000047A 52                              push    dx
   648 0000047B 29DA                            sub     dx,bx
   649 0000047D 8916[0800]                      mov     [deltay],dx
   650 00000481 5A                              pop     dx
   651                                  
   652 00000482 89C6                            mov     si,ax
   653                                  line4:
   654 00000484 50                              push    ax
   655 00000485 52                              push    dx
   656 00000486 56                              push    si
   657 00000487 29C6                            sub     si,ax   ;(x-x1)
   658 00000489 A1[0800]                        mov     ax,[deltay]
   659 0000048C F7EE                            imul    si
   660 0000048E 8B36[0600]                      mov     si,[deltax]     ;arredondar
   661 00000492 D1EE                            shr     si,1
   662                                  ; se numerador (DX)>0 soma se <0 subtrai
   663 00000494 81FA0000                        cmp     dx,0
   664 00000498 7C09                            jl      ar1
   665 0000049A 01F0                            add     ax,si
   666 0000049C 81D20000                        adc     dx,0
   667 000004A0 E90600                          jmp     arc1
   668 000004A3 29F0                    ar1:        sub     ax,si
   669 000004A5 81DA0000                        sbb     dx,0
   670                                  arc1:
   671 000004A9 F73E[0600]                      idiv    word [deltax]
   672 000004AD 01D8                            add     ax,bx
   673 000004AF 5E                              pop     si
   674 000004B0 56                              push    si
   675 000004B1 50                              push    ax
   676 000004B2 E882FE                          call    plot_xy
   677 000004B5 5A                              pop     dx
   678 000004B6 58                              pop     ax
   679 000004B7 39CE                            cmp     si,cx
   680 000004B9 745A                            je      fim_line
   681 000004BB 46                              inc     si
   682 000004BC E9C5FF                          jmp     line4
   683                                  
   684 000004BF 39D3                    line5:      cmp     bx,dx
   685 000004C1 7203                            jb      line7
   686 000004C3 91                              xchg    ax,cx
   687 000004C4 87DA                            xchg    bx,dx
   688                                  line7:
   689 000004C6 51                              push    cx
   690 000004C7 29C1                            sub     cx,ax
   691 000004C9 890E[0600]                      mov     [deltax],cx
   692 000004CD 59                              pop     cx
   693 000004CE 52                              push    dx
   694 000004CF 29DA                            sub     dx,bx
   695 000004D1 8916[0800]                      mov     [deltay],dx
   696 000004D5 5A                              pop     dx
   697                                  
   698                                  
   699                                  
   700 000004D6 89DE                            mov     si,bx
   701                                  line6:
   702 000004D8 52                              push    dx
   703 000004D9 56                              push    si
   704 000004DA 50                              push    ax
   705 000004DB 29DE                            sub     si,bx   ;(y-y1)
   706 000004DD A1[0600]                        mov     ax,[deltax]
   707 000004E0 F7EE                            imul    si
   708 000004E2 8B36[0800]                      mov     si,[deltay]     ;arredondar
   709 000004E6 D1EE                            shr     si,1
   710                                  ; se numerador (DX)>0 soma se <0 subtrai
   711 000004E8 81FA0000                        cmp     dx,0
   712 000004EC 7C09                            jl      ar2
   713 000004EE 01F0                            add     ax,si
   714 000004F0 81D20000                        adc     dx,0
   715 000004F4 E90600                          jmp     arc2
   716 000004F7 29F0                    ar2:        sub     ax,si
   717 000004F9 81DA0000                        sbb     dx,0
   718                                  arc2:
   719 000004FD F73E[0800]                      idiv    word [deltay]
   720 00000501 89C7                            mov     di,ax
   721 00000503 58                              pop     ax
   722 00000504 01C7                            add     di,ax
   723 00000506 5E                              pop     si
   724 00000507 57                              push    di
   725 00000508 56                              push    si
   726 00000509 E82BFE                          call    plot_xy
   727 0000050C 5A                              pop     dx
   728 0000050D 39D6                            cmp     si,dx
   729 0000050F 7404                            je      fim_line
   730 00000511 46                              inc     si
   731 00000512 E9C3FF                          jmp     line6
   732                                  
   733                                  fim_line:
   734 00000515 5F                              pop     di
   735 00000516 5E                              pop     si
   736 00000517 5A                              pop     dx
   737 00000518 59                              pop     cx
   738 00000519 5B                              pop     bx
   739 0000051A 58                              pop     ax
   740 0000051B 9D                              popf
   741 0000051C 5D                              pop     bp
   742 0000051D C20800                          ret     8
   743                                  
   744                                  ;-----------------------------------------------------------------------------
   745                                  ; Função desenha_retangulo
   746                                  ; push x1; push y1; push x2; push y2; call desenha_retangulo
   747                                  ; O retângulo é definido pelos pontos (x1, y1) e (x2, y2)
   748                                  ; A cor é definida na variável 'cor'
   749                                  
   750                                  desenha_retangulo:
   751 00000520 55                          push    bp
   752 00000521 89E5                        mov     bp, sp
   753 00000523 9C                          pushf                 ; Coloca os flags na pilha
   754 00000524 50                          push    ax
   755 00000525 53                          push    bx
   756 00000526 51                          push    cx
   757 00000527 52                          push    dx
   758 00000528 56                          push    si
   759 00000529 57                          push    di
   760                                  
   761 0000052A 8B460A                      mov     ax, [bp + 10]  ; Resgata x1
   762 0000052D 8B5E08                      mov     bx, [bp + 8] ; Resgata y1
   763 00000530 8B4E06                      mov     cx, [bp + 6] ; Resgata x2
   764 00000533 8B5604                      mov     dx, [bp + 4] ; Resgata y2
   765                                  
   766                                      ; Desenha as linhas do retângulo
   767 00000536 50                          push    ax ; Coloca x1 na pilha
   768 00000537 53                          push    bx ; Coloca y1 na pilha
   769 00000538 51                          push    cx ; Coloca x2 na pilha
   770 00000539 53                          push    bx ; Mantém y1 na pilha (reta horizontal superior)
   771 0000053A E8DEFE                      call    line
   772                                  
   773 0000053D 50                          push    ax ; Coloca x1 na pilha
   774 0000053E 52                          push    dx ; Coloca y2 na pilha
   775 0000053F 51                          push    cx ; Coloca x2 na pilha
   776 00000540 52                          push    dx ; Mantém y2 na pilha (reta horizontal inferior)
   777 00000541 E8D7FE                      call    line
   778                                  
   779 00000544 50                          push    ax ; Coloca x1 na pilha
   780 00000545 53                          push    bx ; Coloca y1 na pilha
   781 00000546 50                          push    ax ; Mantém x1 na pilha (reta vertical à esquerda)
   782 00000547 52                          push    dx ; Coloca y2 na pilha
   783 00000548 E8D0FE                      call    line
   784                                  
   785 0000054B 51                          push    cx ; Coloca x2 na pilha
   786 0000054C 53                          push    bx ; Coloca y1 na pilha
   787 0000054D 51                          push    cx ; Mantém x2 na pilha (reta vertical à direita)
   788 0000054E 52                          push    dx ; Coloca y2 na pilha
   789 0000054F E8C9FE                      call    line
   790                                  
   791 00000552 5F                          pop     di
   792 00000553 5E                          pop     si
   793 00000554 5A                          pop     dx
   794 00000555 59                          pop     cx
   795 00000556 5B                          pop     bx
   796 00000557 58                          pop     ax
   797 00000558 9D                          popf
   798 00000559 5D                          pop     bp
   799 0000055A C20800                      ret     8
   800                                  ;*******************************************************************
   801                                  segment data
   802                                  
   803 00000000 0F                      cor     db      branco_intenso
   804                                  
   805                                  ;   I R G B COR
   806                                  ;   0 0 0 0 preto
   807                                  ;   0 0 0 1 azul
   808                                  ;   0 0 1 0 verde
   809                                  ;   0 0 1 1 cyan
   810                                  ;   0 1 0 0 vermelho
   811                                  ;   0 1 0 1 magenta
   812                                  ;   0 1 1 0 marrom
   813                                  ;   0 1 1 1 branco
   814                                  ;   1 0 0 0 cinza
   815                                  ;   1 0 0 1 azul claro
   816                                  ;   1 0 1 0 verde claro
   817                                  ;   1 0 1 1 cyan claro
   818                                  ;   1 1 0 0 rosa
   819                                  ;   1 1 0 1 magenta claro
   820                                  ;   1 1 1 0 amarelo
   821                                  ;   1 1 1 1 branco intenso
   822                                  
   823                                  preto           equ     0
   824                                  azul            equ     1
   825                                  vermelho        equ     4
   826                                  branco          equ     7
   827                                  branco_intenso  equ     15
   828                                  
   829 00000001 00                      modo_anterior    db      0
   830 00000002 0000                    linha            dw      0
   831 00000004 0000                    coluna           dw      0
   832 00000006 0000                    deltax           dw      0
   833 00000008 0000                    deltay           dw      0   
   834 0000000A 45786572636963696F-     mens1            db      'Exercicio de Programacao de Sistemas Embarcados 1 2023/2'
   835 00000013 2064652050726F6772-
   836 0000001C 616D6163616F206465-
   837 00000025 2053697374656D6173-
   838 0000002E 20456D626172636164-
   839 00000037 6F7320312032303233-
   840 00000040 2F32               
   841 00000042 5061747269636B2043-     mens2            db      'Patrick Catrinck  00  x  00  Computador                       Velocidade (1/3)'
   842 0000004B 617472696E636B2020-
   843 00000054 303020207820203030-
   844 0000005D 2020436F6D70757461-
   845 00000066 646F72202020202020-
   846 0000006F 202020202020202020-
   847 00000078 202020202020202056-
   848 00000081 656C6F636964616465-
   849 0000008A 2028312F3329       
   850 00000090 1400                    velocidade       dw      20
   851 00000092 0100                    vx               dw      1
   852 00000094 0100                    vy               dw      1
   853 00000096 0000                    vy_ret           dw      0        ;velocidade em y do retangulo
   854 00000098 4001                    p_bx             dw      320      ;posicao bola x
   855 0000009A F000                    p_by             dw      240      ;posicao bola y
   856 0000009C 5802                    p_px             dw      600      ;posicao paddle x
   857 0000009E FF00                    p_py             dw      255      ;posicao paddle y
   858 000000A0 6202                    p_pxl            dw      610      ;posicao paddle x + largura (10)
   859 000000A2 D700                    p_pya            dw      215      ;posicao paddle y - altura  (50)
   860 000000A4 0000                    ponto_jogador    dw      0
   861 000000A6 0000                    ponto_computador dw      0
   862 000000A8 3030                    string_ponto_computador        db      "00"     ; Reserve space for the result
   863 000000AA 3030                    string_ponto_jogador           db      "00"     ; Reserve space for the result
   864                                  
   865                                  ; ; Somar p_px com p_l e armazenar em p_pxl
   866                                  ; mov ax, [p_px]    ; Carrega o valor de p_px em ax
   867                                  ; add ax, [p_l]     ; Soma o valor de p_l a ax
   868                                  ; mov [p_pxl], ax   ; Armazena o resultado em p_pxl
   869                                  
   870                                  ; ; Somar p_py com p_a e armazenar em p_pya
   871                                  ; mov ax, [p_py]    ; Carrega o valor de p_py em ax
   872                                  ; add ax, [p_a]     ; Soma o valor de p_a a ax
   873                                  ; mov [p_pya], ax   ; Armazena o resultado em p_pya
   874                                  ;*************************************************************************
   875                                  segment stack stack
   876 00000000 <res 00000200>                      resb        512
   877                                  stacktop:
